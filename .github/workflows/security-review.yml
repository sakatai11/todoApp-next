name: Security Review CI

on:
  pull_request:
    branches: [main, develop-v2]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop-v2]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  # Security Scans
  traditional-security-scans:
    name: Traditional Security Scans
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate shell scripts
        run: |
          echo "🔍 Validating shell script syntax..."
          bash -n scripts/security-check.sh
          if command -v shellcheck >/dev/null 2>&1; then
            echo "🔍 Running ShellCheck..."
            shellcheck -x scripts/security-check.sh
          else
            echo "⚠️  ShellCheck not available, skipping static analysis"
          fi

      - name: Run ESLint security rules
        run: npm run lint
        continue-on-error: true

      - name: Run ESLint security rules
        run: npm run lint
        continue-on-error: true

      - name: Enhanced dependency security check (PR only)
        if: github.event_name == 'pull_request'
        run: |
          echo "🔍 Running enhanced dependency security check..."

          # npm audit 結果を常にJSON保存（後段で集計して必要ならfail）
          echo "📋 Checking for vulnerabilities..."
          npm audit --json > npm-audit.json || true
          node -e "
            const fs = require('fs');
            let exit = 0;
            try {
              const data = JSON.parse(fs.readFileSync('npm-audit.json','utf8'));
              const v = (data.metadata && data.metadata.vulnerabilities) || {};
              const critical = v.critical || 0, high = v.high || 0, moderate = v.moderate || 0;
              const moderatePlus = critical + high + moderate;
              if (moderatePlus > 0) {
                console.log(\`::error::npm audit detected vulnerabilities - Critical:\${critical} High:\${high} Moderate:\${moderate}\`);
                exit = 1;
              } else {
                console.log('✅ No moderate+ vulnerabilities');
              }
            } catch (e) {
              console.log('::warning::Failed to parse npm-audit.json:', e.message);
            }
            process.exit(exit);
          "

          echo "📦 Analyzing package.json for security concerns..."
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            
            // 潜在的に問題のあるパッケージをチェック
            const concerningPackages = [
              'eval', 'vm2', 'serialize-javascript'  // 動的コード実行系
            ];
            
            const allDeps = {...(packageJson.dependencies || {}), ...(packageJson.devDependencies || {})};
            const foundConcerning = concerningPackages.filter(pkg => allDeps[pkg]);
            
            if (foundConcerning.length > 0) {
              console.log('⚠️  Potentially concerning packages found:', foundConcerning.join(', '));
            } else {
              console.log('✅ No concerning packages detected');
            }
          "

          echo "✅ Alternative dependency check completed"

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Secret scanning with gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Custom security checks
        run: |
          chmod +x ./scripts/security-check.sh
          ./scripts/security-check.sh

      - name: Security audit (print saved results)
        if: always()
        run: |
          if [ -s npm-audit.json ]; then
            echo "::group::npm-audit.json"
            cat npm-audit.json
            echo "::endgroup::"
          fi

      - name: Check for sensitive files
        run: |
          # 機密ファイルの存在チェック
          set -euo pipefail
                    found=0
          # node_modules/.git配下は除外
          matches=$(find . \( -path "./node_modules" -o -path "./.git" \) -prune -false -o -type f \
                    \( -name ".env*" -o -name "firebase-adminsdk-*.json" -o -name "*.pem" -o -name "*.p12" -o -name "*.p8" -o -name "*.jks" -o -name "id_rsa" -o -name "id_dsa" -o -name "config.json" \) \
                    ! -name ".env.example" ! -name "*.pub" -print)

          if [ -n "$matches" ]; then
            echo "$matches" | while read -r f; do
              echo "::error::Sensitive file found: ${f}"
            done
            found=1
          fi

          if [ "$found" -eq 1 ]; then
            echo "::error::Sensitive files detected. Please review and remove them."
            exit 1
          fi

      - name: Next.js security headers check
        run: |
          # Next.js設定のセキュリティヘッダーをチェック
          if [ -f "next.config.ts" ] || [ -f "next.config.js" ]; then
            echo "Checking Next.js security configuration..."
            node -e "
              const fs = require('fs');
              const configFile = fs.existsSync('next.config.ts') ? 'next.config.ts' : 'next.config.js';
              const content = fs.readFileSync(configFile, 'utf8');
              
              const requiredHeaders = [
                'Content-Security-Policy',
                'Strict-Transport-Security',
                'X-Content-Type-Options',
                'X-Frame-Options',
                'Referrer-Policy',
                'Permissions-Policy'
              ];
              
              let missingHeaders = [];
              requiredHeaders.forEach(header => {
                if (!content.includes(header)) {
                  missingHeaders.push(header);
                }
              });
              
              if (missingHeaders.length > 0) {
                console.log('::warning::Missing security headers:', missingHeaders.join(', '));
              } else {
                console.log('✅ Security headers configuration found');
              }
            "
          fi

      - name: Firebase security rules check
        run: |
          # Firebase設定のセキュリティルールをチェック
          if [ -f "firebase.json" ]; then
            echo "Checking Firebase security configuration..."
            node -e "
              const fs = require('fs');
              const firebaseConfig = JSON.parse(fs.readFileSync('firebase.json', 'utf8'));
              
              // Firestoreルールファイルの存在確認
              if (firebaseConfig.firestore && firebaseConfig.firestore.rules) {
                console.log('✅ Firestore security rules configured');
              } else {
                console.log('::warning::Firestore security rules not configured');
              }
              
              // Storage rulesの確認
              if (firebaseConfig.storage && firebaseConfig.storage.rules) {
                console.log('✅ Storage security rules configured');
              }
            "
          fi

      - name: Environment variable security check
        run: |
          # 環境変数の適切な設定をチェック
          echo "Checking environment variable configuration..."

          # Vercel設定チェック
          if [ -f "vercel.json" ]; then
            node -e "
              const fs = require('fs');
              const vercelConfig = JSON.parse(fs.readFileSync('vercel.json', 'utf8'));
              
              const env = (vercelConfig && vercelConfig.env) || {};
              const publicSensitive = Object.keys(env).filter(key =>
                key.startsWith('NEXT_PUBLIC_') &&
                /API_KEY|SECRET|TOKEN|PASSWORD|PRIVATE/i.test(key)
              );
              if (publicSensitive.length > 0) {
                console.log('::warning::Potentially sensitive public env vars found:', publicSensitive.join(', '));
              }
            "
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            npm-audit.json
            results/
          if-no-files-found: ignore
          retention-days: 30

      - name: Comment PR with security summary
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔒 Security Review Summary\n\n';

            // npm audit結果の確認
            try {
              if (fs.existsSync('npm-audit.json')) {
                const auditData = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
                if (auditData.metadata && auditData.metadata.vulnerabilities) {
                  const vulns = auditData.metadata.vulnerabilities;
                  comment += `### 📦 Dependency Vulnerabilities\n`;
                  comment += `- Critical: ${vulns.critical || 0}\n`;
                  comment += `- High: ${vulns.high || 0}\n`;
                  comment += `- Moderate: ${vulns.moderate || 0}\n`;
                  comment += `- Low: ${vulns.low || 0}\n\n`;
                }
              }
            } catch (e) {
              comment += '### 📦 Dependency Scan: ⚠️ 結果を取得できませんでした（JSON未作成/解析失敗）\n\n';
            }

            comment += '### ✅ Security Checks Completed\n';
            comment += '- ESLint security rules\n';
            comment += '- Dependency vulnerability scan\n';
            comment += '- CodeQL analysis\n';
            comment += '- Secret scanning\n';
            comment += '- Custom security checks\n';
            comment += '- Configuration security review\n\n';
            comment += '*For detailed results, check the workflow logs and artifacts.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
